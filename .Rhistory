"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
#library(xts)
require (Rcpp)
library(shiny)
#library(tidyr)
#library(dplyr)
require (readxl)
require (stringr)
require (ggplot2)
require (TSstudio)
require (data.table)
#library(vioplot)
require (prettydoc)
require (here)
ui <- shinyUI(
bootstrapPage(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
server <- shinyServer(function(input, output) {
#1. 僅在輸入有變化時調用
#2. 計算和結果由所有callers共享（只執行一次）
#3. 當輸入改變並重新執行時，新結果與之前的結果進行比較; 如果這兩個是相同的，便會通知callers
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
#library(xts)
require (Rcpp)
library(shiny)
#library(tidyr)
#library(dplyr)
require (readxl)
require (stringr)
require (ggplot2)
require (TSstudio)
require (data.table)
#library(vioplot)
require (prettydoc)
require (here)
ui <- shinyUI(
bootstrapPage(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
#includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
server <- shinyServer(function(input, output) {
#1. 僅在輸入有變化時調用
#2. 計算和結果由所有callers共享（只執行一次）
#3. 當輸入改變並重新執行時，新結果與之前的結果進行比較; 如果這兩個是相同的，便會通知callers
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
#library(xts)
require (Rcpp)
library(shiny)
#library(tidyr)
#library(dplyr)
require (readxl)
require (stringr)
require (ggplot2)
require (TSstudio)
require (data.table)
#library(vioplot)
require (prettydoc)
require (here)
ui <- shinyUI(
bootstrapPage(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
#includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
server <- shinyServer(function(input, output) {
#1. 僅在輸入有變化時調用
#2. 計算和結果由所有callers共享（只執行一次）
#3. 當輸入改變並重新執行時，新結果與之前的結果進行比較; 如果這兩個是相同的，便會通知callers
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
#library(xts)
require (Rcpp)
library(shiny)
#library(tidyr)
#library(dplyr)
require (readxl)
require (stringr)
require (ggplot2)
require (TSstudio)
require (data.table)
#library(vioplot)
require (prettydoc)
require (here)
ui <- shinyUI(
bootstrapPage(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
#includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
server <- shinyServer(function(input, output) {
#1. 僅在輸入有變化時調用
#2. 計算和結果由所有callers共享（只執行一次）
#3. 當輸入改變並重新執行時，新結果與之前的結果進行比較; 如果這兩個是相同的，便會通知callers
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
#library(xts)
require (Rcpp)
library(shiny)
#library(tidyr)
#library(dplyr)
require (readxl)
require (stringr)
require (ggplot2)
require (TSstudio)
require (data.table)
#library(vioplot)
require (prettydoc)
require (here)
ui <- shinyUI(
bootstrapPage(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
#includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
server <- shinyServer(function(input, output) {
#1. 僅在輸入有變化時調用
#2. 計算和結果由所有callers共享（只執行一次）
#3. 當輸入改變並重新執行時，新結果與之前的結果進行比較; 如果這兩個是相同的，便會通知callers
datasetInput <- reactive({
switch(input$dataset,
"rock" = rock,
"pressure" = pressure,
"cars" = cars)
})
#output$caption 是根據reactive function計算的
#input$caption 則是用戶更改'標題'時：
#1. 自動調用此function以重新計算輸出
#2. 新標題被推回瀏覽器重新顯示
output$caption <- renderText({
input$caption
})
# output$summary 取決於輸入的datasetInput reactive function,
# (i.e. 每當input$dataset 改變時， summary會變動)
output$summary <- renderPrint({
dataset <- datasetInput()
summary(dataset)
})
# output$view 取決於輸入的 databaseInput reactive expression和 input$obs
output$view <- renderTable({
head(datasetInput(), n = input$obs)
})
})
#shinyApp( ui = ui, server = server)
#shinyApp(ui = htmlTemplate("E:/shiny_tutorial/ch3_shiny_html/www/index.html"), server=server)
shinyApp( ui = ui, server = server)
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../ch2_Reactivity/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("E:/shiny_tutorial/ch2_Reactivity/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch2_Reactivity/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
# ui.R
library(shiny)
shinyUI(pageWithSidebar(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8881)
runApp("../shiny_tutorial/ch3_shiny_html/")
runApp("../shiny_tutorial/ch2_Reactivity//")
runApp("../shiny_tutorial/ch2_Reactivity/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html//")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8880)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
# ui.R
getwd()
# ui.R
getwd()
library(shiny)
shinyUI(pageWithSidebar(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
includeHTML("../ch3_shiny_html/www/index.html")
)
))
# ui.R
getwd()
library(shiny)
shinyUI(pageWithSidebar(
# 標題(最明顯的那種)
headerPanel("Reactivity"),
# textInput　輸入文字用
# selectInput　選取方格
# numericInput　輸入數值
# 以上這些皆可以即時變換要呈現的主畫面
sidebarPanel(
textInput("caption", "Caption:", "Data Summary"),
selectInput("dataset", "Choose a dataset:",
choices = c("rock", "pressure", "cars")),
numericInput("obs", "Number of observations to view:", 10)
),
# 主畫面包含輸入變換的title、 data的摘要、data實際樣貌
mainPanel(
h3(textOutput("caption")),
verbatimTextOutput("summary"),
tableOutput("view"),
includeHTML("../shiny_tutorial/ch3_shiny_html/www/index.html")
)
))
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
library(shiny)
options(shiny.host = '0.0.0.0')
options(shiny.port = 8882)
runApp("../shiny_tutorial/ch3_shiny_html/")
